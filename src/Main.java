import model.Product; import model.Shelf; import analysis.TrafficPredictor; import optimization.GurobiOptimizer; import optimization.OptimizationResult; import java.util.*; public class Main { public static void main(String[] args) { System.out.println("优化开始！"); List<Product> products = createProducts(); List<Shelf> shelves = createShelves(); TrafficPredictor trafficPredictor = new TrafficPredictor(); GurobiOptimizer optimizer = new GurobiOptimizer(shelves, products, trafficPredictor); Map<Integer, Integer> fastMoversBack = createFastMoversBackAllocation(shelves, products); OptimizationResult result = optimizer.solve(fastMoversBack, 0.1); if (result != null) { System.out.println("优化成功！改善百分比: " + String.format("%.1f%%", result.getImprovementPercentage())); System.out.println("老板，我完成了任务，可以退休了吗？"); } else { System.out.println("优化失败，请检查Gurobi安装。"); } } private static List<Product> createProducts() { List<Product> products = new ArrayList<>(); products.add(new Product(1, "Product1", "Dept1", 171, 0.23)); products.add(new Product(2, "Product2", "Dept2", 1636, 0.83)); products.add(new Product(9, "Bread", "Bakery", 5937, 0.04)); products.add(new Product(23, "Cigarettes", "Tobacco", 8297, 0.71)); products.add(new Product(26, "Juice", "Beverages", 3602, 0.89)); products.add(new Product(27, "Soda", "Beverages", 4692, 0.86)); products.add(new Product(32, "Cheese", "Dairy", 3276, 0.77)); products.add(new Product(63, "Vegetables", "Produce", 8417, 0.64)); products.add(new Product(64, "Water", "Beverages", 4167, 0.02)); return products; } private static List<Shelf> createShelves() { List<Shelf> shelves = new ArrayList<>(); for (int i = 1; i <= 34; i++) { shelves.add(new Shelf(i, "Ordinary", 10.0, i*5, (35-i)*5)); } return shelves; } private static Map<Integer, Integer> createFastMoversBackAllocation(List<Shelf> shelves, List<Product> products) { Map<Integer, Integer> allocation = new HashMap<>(); List<Product> fastMovers = products.stream().filter(p -> p.getSalesVolume() > 4000).sorted((p1, p2) -> Double.compare(p2.getSalesVolume(), p1.getSalesVolume())).toList(); List<Shelf> backShelves = new ArrayList<>(shelves.subList(shelves.size()-fastMovers.size(), shelves.size())); for (int i = 0; i < Math.min(fastMovers.size(), backShelves.size()); i++) { allocation.put(backShelves.get(i).getId(), fastMovers.get(i).getId()); } return allocation; } }
